/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/key-labels/42.h"

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Key position groups */

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39 40 41

/* Behavior Settings */
&sk {
  release-after-ms = <250>;
  quick-release;
};

&sl {
  release-after-ms = <250>;
};

/* Homerow mods */
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat,  &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt,    KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt,    KEYS_L THUMBS)    // "    "   "   "

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/ {
    behaviors {
        mtl: mod_tap_left {
            compatible: "zmk,behavior-hold-tap";
            label: "MOD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "balanced"
                        tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };
        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };
    combos {
        compatible = "zmk,combos";

        /* Letters */
        v { key-positions = <2 3>; bindings = <&kp V>; layers = <DEF_L>; };
        q { key-positions = <3 4>; bindings = <&kp Q>; layers = <DEF_L>; };
        z { key-positions = <26 27>; bindings = <&kp Z>; layers = <DEF_L>; };

        /* Brackets */
        lbkt { key-positions = <2 14>; bindings = <&kp LBKT>; layers = <DEF_L SYM_L NUM_L>; };
        rbkt { key-positions = <9 21>; bindings = <&kp RBKT>; layers = <DEF_L SYM_L NUM_L>; };
        lbrc { key-positions = <3 15>; bindings = <&kp LBRC>; layers = <DEF_L SYM_L NUM_L>; };
        rbrc { key-positions = <8 20>; bindings = <&kp RBRC>; layers = <DEF_L SYM_L NUM_L>; };
        lpar { key-positions = <4 16>; bindings = <&kp LPAR>; layers = <DEF_L SYM_L NUM_L>; };
        rpar { key-positions = <7 19>; bindings = <&kp RPAR>; layers = <DEF_L SYM_L NUM_L>; };

        /* Convenience */
        del { key-positions = <5 17>; bindings = <&kp DEL>; };
        esc { key-positions = <6 18>; bindings = <&kp ESC>; };
        slall { key-positions = <26 27>; bindings = <&kp SLALL>; layers = <NAV_L>; };
    };
/* 0   1   2   3   4   5      6   7   8   9  10  11
  12  13  14  15  16  17     18  19  20  21  22  23
  24  25  26  27  28  29     30  31  32  33  34  35
              36  37  38     39  40  41
*/
    keymap {
        compatible = "zmk,keymap";

        default_layer {
/*
   ╭───────────────────────────────────╮   ╭───────────────────────────────────╮
   |     |  X  |  C  |  L  |  F  |  V  |   |  Z  |  Y  |  O  |  U  |  '  |     |
   |     |  R  |  S  |  N  |  T  |  P  |   |  K  |  H  |  E  |  I  |  A  |     |
   |     |  Q  |  W  |  M  |  G  |  B  |   |  J  |  D  |  ,  |  .  |  /  |     |
   ╰─────────────────╮ GUI | NAV | SPC |   |SHIFT| SYM | ENT ╭─────────────────╯
                     ╰─────────────────╯   ╰─────────────────╯    
*/

            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp TAB       &kp X         &kp C         &kp L         &kp F        &kp V           &kp Z          &kp Y         &kp O         &kp U         &kp '         &kp BSPC
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//  &kp LCTRL     &kp R         &kp S         &kp N         &kp T         &kp P           &kp K         &kp H         &kp E         &kp I         &kp A         &kp SQT
    &kp LCTRL     &hml LGUI R   &hml LALT S   &hml LSHFT N  &hml LCTRL T  &kp P           &kp K         &hmr RCTRL H  &hmr RSHFT E  &hmr LALT I   &hmr LGUI A   &kp SQT
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LSHFT     &kp Q         &kp W         &kp M         &kp G         &kp B           &kp J         &kp D         &kp COMMA     &kp DOT       &kp FSLH      &kp ESC
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &kp LGUI      &sl NAV_L     &kp SPACE       &sk LSHFT     &sl SYM_L     &none
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        nav_layer {
/*
   ╭───────────────────────────────────╮   ╭───────────────────────────────────╮
   |     | F5  | F6  | F7  | F8  |     |   |     |ESC  |UP   |TAB  |HOME |     |
   |     |LGUI |LALT |LSHFT|LCTRL|     |   |PG_UP|LEFT |ENTR |RIGHT|END  |     |
   |     |     |CUT  |COPY |PASTE|UNDO |   |PG_DN|BSPC |DOWN |DEL  |     |     |
   ╰─────────────────╮     |     |     |   |     |     |     ╭─────────────────╯
                     ╰─────────────────╯   ╰─────────────────╯    
*/
	    label = "Nav";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &none         &kp F5        &kp F6        &kp F7        &kp F8        &none           &none         &kp ESC       &kp UARW      &kp TAB       &kp HOME      &none       
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &none         &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTL      &none           &kp PG_UP     &kp LARW      &kp ENTER     &kp RARW      &kp END       &none
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &none         &none         &kp CUT       &kp COPY      &kp PASTE     &kp UNDO        &kp PKG_DN    &kp BSPC      &kp DARW      &kp DEL       &none         &none 
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &trans        &trans        &trans          &trans        &trans        &trans            
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        sym_layer {
/*
   ╭───────────────────────────────────╮   ╭───────────────────────────────────╮
   |     |     | @   | #   | $   |     |   |     | &   | ;   | :   |     |     |
   |     | !   | =   | -   | /   | %   |   | ^   |ctrl |shift|alt  | ?   |     |
   |     | ~   | _   | +   | *   | `   |   | \   | |   | <   | >   | gui |     |
   ╰─────────────────╮     |     |     |   |     |     |     ╭─────────────────╯
                     ╰─────────────────╯   ╰─────────────────╯    
*/
            label = "Sym";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &none         &none         &kp AT        &kp HASH      &kp DLLR      &none           &none         &kp AMPS      &kp SEMI      &kp COLON     &none         &none
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &none         &kp EXCL      &kp EQUAL     &kp MINUS     &kp FSLH      &kp PRCNT       &kp CARET     &kp LCTRL     &kp LSHFT     &kp LALT      &kp QMARK     &none
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &none         &kp TILDE     &kp UNDER     &kp PLUS      &kp ASTRK     &kp GRAVE       &kp BSLH      &kp PIPE      &kp LT        &kp GT        &kp LGUI      &none
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &trans        &trans        &trans          &trans        &trans        &trans
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        num {
/*
   ╭───────────────────────────────────╮   ╭───────────────────────────────────╮
   |BTC  | BT0 | BT1 | BT2 | BT3 | BT4 |   |     |     |     |     |     |     |
   |     | 1   | 2   | 3   | 4   | 5   |   | 6   | 7   | 8   | 9   | 0   |     |
   |     |     |     |     |     |     |   |     |     |     |     |     |     |
   ╰─────────────────╮     |     |     |   |     |     |     ╭─────────────────╯
                     ╰─────────────────╯   ╰─────────────────╯    
*/
            label = "Num";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none         &none         &none         &none         &none         &none
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &none         &mtl LGUI N1  &mtl LALT N2  &mtl LSHFT N3 &mtl LCTRL N4 &kp N5          &kp N6        &mtr LCTRL N7 &mtr LSHFT N8 &mtr LALT N9  &mtr LGUI N0  &none
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &none         &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &trans        &trans        &trans          &trans        &trans        &trans
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
            >;
        };
    };
};
/*
   ╭───────────────────────────────────╮   ╭───────────────────────────────────╮
   |     |     |     |     |     |     |   |     |     |     |     |     |     |
   |     |     |     |     |     |     |   |     |     |     |     |     |     |
   |     |     |     |     |     |     |   |     |     |     |     |     |     |
   ╰─────────────────╮     |     |     |   |     |     |     ╭─────────────────╯
                     ╰─────────────────╯   ╰─────────────────╯    
*/
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
