/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/key-labels/42.h"

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Key position groups */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                 // thumbs

/* Homerow mods */
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat,  &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt,    KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt,    KEYS_L THUMBS)    // "    "   "   "

/ {
    behaviors {
        mtl: mod_tap_left {
            compatible: "zmk,behavior-hold-tap";
            label: "MOD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "balanced"
                        tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };
        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };
    combos {
        compatible = "zmk,combos";

        /* Letters */
        v { key-positions = <LT2 LT3>; bindings = <&kp V>; layers = <DEF_L>; };
        q { key-positions = <LT1 LT2>; bindings = <&kp Q>; layers = <DEF_L>; };
        z { key-positions = <LB2 LB3>; bindings = <&kp Z>; layers = <DEF_L>; };

        /* Brackets */
        lbkt { key-positions = <LT3 LM3>; bindings = <&kp LBKT>; layers = <DEF_L SYM_L NUM_L>; };
        rbkt { key-positions = <RT3 RM3>; bindings = <&kp RBKT>; layers = <DEF_L SYM_L NUM_L>; };
        lbrc { key-positions = <LT2 LM2>; bindings = <&kp LBRC>; layers = <DEF_L SYM_L NUM_L>; };
        rbrc { key-positions = <RT2 RM2>; bindings = <&kp RBRC>; layers = <DEF_L SYM_L NUM_L>; };
        lpar { key-positions = <LT1 LM1>; bindings = <&kp LPAR>; layers = <DEF_L SYM_L NUM_L>; };
        rpar { key-positions = <RT1 RM1>; bindings = <&kp RPAR>; layers = <DEF_L SYM_L NUM_L>; };

        /* Convenience */
        del { key-positions = <LT0 LM0>; bindings = <&kp DEL>; };
        esc { key-positions = <RT0 RM0>; bindings = <&kp ESC>; };
        slall { key-positions = <LB2 LB3>; bindings = <&kp SLALL>; layers = <NAV_L>; };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
/*
   ╭────────────────────────────────────╮   ╭────────────────────────────────────╮
   | ???? |  X  |  C  |  L  |  F  |  V  |   |  Z  |  Y  |  O  |  U  |  '  | ???? |
   | ???? |  R  |  S  |  N  |  T  |  P  |   |  K  |  H  |  E  |  I  |  A  | ???? |
   | ???? |  Q  |  W  |  M  |  G  |  B  |   |  J  |  D  |  ,  |  .  |  /  | ???? |
   ╰──────────────────╮ GUI | NAV | SPC |   |SHIFT| SYM | ENT ╭──────────────────╯
                      ╰─────────────────╯   ╰─────────────────╯    
*/

            bindings = <
   &kp TAB   &kp X &kp C &kp L &kp F &kp V   &kp Z &kp Y  &kp O     &kp U   &kp '    &kp BSPC
   &kp LCTRL &kp R &kp S &kp N &kp T &kp P   &kp K &kp H  &kp E     &kp I   &kp A    &kp SQT
   &kp LSHFT &kp Q &kp W &kp M &kp G &kp B   &kp J &kp D  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
            >;
        };

        nav_layer {
/*
   ╭────────────────────────────────────╮   ╭────────────────────────────────────╮
   |      | F1  | F2  | F3  | F4  | F5  |   |     |     |     |     |     |      |
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   ╰──────────────────╮     |     |     |   |     |     |     ╭──────────────────╯
                      ╰─────────────────╯   ╰─────────────────╯    
*/
            bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
            >;
        };

        sym_layer {
/*
   ╭────────────────────────────────────╮   ╭────────────────────────────────────╮
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   ╰──────────────────╮     |     |     |   |     |     |     ╭──────────────────╯
                      ╰─────────────────╯   ╰─────────────────╯    
*/
            bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
            >;
        };

        num {
/*
   ╭────────────────────────────────────╮   ╭────────────────────────────────────╮
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   |      |     |     |     |     |     |   |     |     |     |     |     |      |
   ╰──────────────────╮     |     |     |   |     |     |     ╭──────────────────╯
                      ╰─────────────────╯   ╰─────────────────╯    
*/
            bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
            >;
        };
    };
};
